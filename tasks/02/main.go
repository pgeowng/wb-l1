package main

import "fmt"

func main() {
	input := []int{2, 4, 6, 8, 10}

	// Отсылаем данные в in channel.
	// Так же можно сделать буффер достаточно большим,
	// чтобы было меньше переключений между горутинами.
	in := make(chan int, 5)
	go func() {
		defer close(in)
		for _, num := range input {
			in <- num
		}
	}()

	// Отдельно преобразуем данные по мере поступления.
	// Можно запустить несколько воркеров.
	// Из-за этого придется отдельно обрабатывать закрытие out channel
	// и изначальный порядок не гарантирован вследствие случайного порядка исполнения горутин
	out := make(chan int)
	go func() {
		defer close(out)
		for n := range in {
			out <- n * n
		}
	}()

	// Ожидаем обработанные данные,
	// так как завершение main не ожидает выполнения горутин.
	for result := range out {
		fmt.Printf("%d ", result)
	}
}
